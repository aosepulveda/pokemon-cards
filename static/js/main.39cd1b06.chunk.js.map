{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","card","imageUrl","name","set","CardList","cards","map","key","id","App","searchCardsByPokemon","fetch","then","response","json","data","setState","debounce","a","b","c","d","e","h","apply","f","g","this","arguments","clearTimeout","setTimeout","searchField","state","length","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAIaA,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,MCLDI,G,MAAO,SAAAC,GAAK,OACvB,yBAAKJ,UAAU,kBACb,yBAAKK,IAAI,OAAOC,IAAKF,EAAMG,KAAKC,WAChC,gCAAMJ,EAAMG,KAAKE,KAAjB,KACA,oCAAUL,EAAMG,KAAKG,IAArB,QCFSC,G,MAAW,SAAAP,GACtB,OACE,yBAAKJ,UAAU,aACbI,EAAMQ,MAAMC,KAAI,SAAAN,GAAI,OAAI,kBAAC,EAAD,CAAMO,IAAKP,EAAKQ,GAAIR,KAAMA,UCiEzCS,G,kBAlEb,aAAe,IAAD,8BACZ,+CAWFC,qBAAuB,SAAAR,GACrBS,MAAM,2CAAD,OAA4CT,IAC9CU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEX,MAAOU,EAAKV,YAhBpB,EAqBdY,SAAW,SAACC,EAAGC,EAAGC,GAChB,IAAIC,EAAGC,EACP,OAAO,WACL,SAASC,IACPF,EAAI,KACJD,IAAME,EAAIJ,EAAEM,MAAMC,EAAGC,IAEvB,IAAID,EAAIE,KACND,EAAIE,UACN,OACEC,aAAaR,GACZA,EAAIS,WAAWP,EAAGJ,GACnBC,IAAMC,IAAMC,EAAIJ,EAAEM,MAAMC,EAAGC,IAC3BJ,IAlCQ,EAwCd9B,aAAe,EAAKyB,UAAS,SAAAK,GAC3B,EAAKN,SAAS,CAAEe,YAAaT,IAAK,WAC5B,EAAKU,MAAMD,YAAYE,OAAS,GAClC,EAAKvB,qBAAqB,EAAKsB,MAAMD,kBAGxC,KA5CD,EAAKC,MAAQ,CACXD,YAAa,GACb1B,MAAO,IAJG,E,iFASZsB,KAAKjB,qBAAqB,a,+BAuClB,IAAD,OACCL,EAAUsB,KAAKK,MAAf3B,MAER,OACE,yBAAKZ,UAAU,OACb,6CACA,kBAAC,EAAD,CACEF,YAAY,sBACZC,aAAc,SAAA8B,GACZ,EAAK9B,aAAa8B,EAAEY,OAAOC,UAG/B,kBAAC,EAAD,CAAU9B,MAAOA,S,GA7DP+B,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.39cd1b06.chunk.js","sourcesContent":["import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange} />\n);\n","import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n  <div className='card-container'>\n    <img alt=\"card\" src={props.card.imageUrl} />\n    <h2> {props.card.name} </h2>\n    <p> Set: {props.card.set} </p>\n  </div>\n);\n","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = props => {\n  return (\n    <div className='card-list'>{\n      props.cards.map(card => <Card key={card.id} card={card} />)\n    }</div>);\n};\n","import React, { Component } from \"react\";\n\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport { CardList } from \"./components/card-list/card-list.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField: \"\",\n      cards: []\n    };\n  }\n\n  componentDidMount() {\n    this.searchCardsByPokemon(\"pikachu\");\n  }\n\n  searchCardsByPokemon = name => {\n    fetch(`https://api.pokemontcg.io/v1/cards?name=${name}`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ cards: data.cards });\n      });\n  };\n\n  // eslint-disable-next-line no-sequences\n  debounce = (a, b, c) => {\n    var d, e;\n    return function() {\n      function h() {\n        d = null;\n        c || (e = a.apply(f, g));\n      }\n      var f = this,\n        g = arguments;\n      return (\n        clearTimeout(d),\n        (d = setTimeout(h, b)),\n        c && !d && (e = a.apply(f, g)),\n        e\n      );\n    };\n  };\n\n  // arrow function do context binding automatically\n  handleChange = this.debounce(e => {\n    this.setState({ searchField: e }, () => {\n      if (this.state.searchField.length > 2) {\n        this.searchCardsByPokemon(this.state.searchField);\n      }\n    });\n  }, 1000);\n\n  render() {\n    const { cards } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Pokemon Cards</h1>\n        <SearchBox\n          placeholder=\"search cards by set\"\n          handleChange={e => {\n            this.handleChange(e.target.value);\n          }}\n        />\n        <CardList cards={cards} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}